You are expected to do your own work on all homework assignments. You may (and are encouraged to) engage in general discussions with your classmates regarding the assignments, but specific details of a solution, including the solution itself, must always be your own work. (See the statement of Academic Dishonesty on the Syllabus.)

What to turn in?

You should turn in an electronic archive (.zip, .tar., .tgz, etc.). The archive must contain a single top-level directory called ics432_hwX_NAME, where “NAME” is your UH username and “X” is the homework assignment number (e.g., ics432_hw1_henric). Inside that directory you should have all your code (no binaries, .class, etc.) and requested files, named exactly as specified in the questions below. We should be able to do a “javac *.java” (with the correct “-cp” clause to include jar files) in that archive and compile all your code without errors.

Assignments need to be turned in via Laulima. Check the Syllabus for the late assignment policy for this course.

Exercise #1: Making a Movie [25pts]
	In this exercise we generate the frames of a simple animated movie, where each frame is rendered using ray tracing. You are given a sequential (i.e., non-concurrent) program, and you have to make it concurrent. The objective is to run faster (because you have a multi-core processor).
	Implementing a ray tracer belongs in a computer graphics course. So instead of implementing one I give you this jar file, ics432_raytracer.jar, which defines the package org.ics432.raytracer.
	I also provide you with a sequential program as a starting point, MakeMovieSequential.java
	You can run this program from your IDE or the command-line. It takes a single command-line argument, which is a number of frames. It will generate the frames as image files (PNG format) in the working directory, named frame_00000.png, frame_00001.png, etc. You may then use a tool to assemble these frames into an actual movie (e.g., with the convert tool on Linux/MacOSX), but this is not required for this assignment.

Turn in only one version of your code, and we will grade based on what features you implemented.



Question #1 [5pts] : Measuring execution time
	Create a copy of MakeMovieSequential.java and call it MakeMovieConcurrent.java. Enhance it so that it prints out the execution time in seconds.
	Execute your program on your quiescent machine for 48 frames, and report on the execution time in a file README.txt that you must turn in along with your code. This will take several minutes. For debugging purposes you can of course generate fewer frames.


Question #2 [10pts]: Using 2 threads
Enhance your program so that 2 threads each compute half of the movie frames (you can assume that the total number of frames is even). Measure the execution time again for 48 frames and report on it in README.txt. How much faster does your program run compared to the sequential version? Is it 2x faster? Discuss in README.txt why you think that is.


Question #3 [10pts]: Using 1, 2, 3, or 4 threads
	Enhance your program so that it takes a second command-line argument to specify the number of threads that will be used to compute movie frames, which can be 1, 2, 3, or 4. Distribute the computation evenly across the threads. You can assume that the number of frames is divisible by 2, 3, and 4.
	Execute your program with 3 and 4 threads for 48 frames and report the execution times in README.txt. In that file also compute the speedup achieved, i.e., the ratio of the sequential execution time to the concurrent execution time. Then briefly discuss the following points in README.txt:
	Is the speedup with 3 threads equal to 3? Is the speedup with 4 threads equal to 4?
    For which number of threads do you get the best performance and how many cores do you have on your machine?
    On your machine, is it worth it using as many threads as cores for this application? In other words, is the performance benefit of using the last core worthwhile, or would it be better to not use it perhaps, which then leaves it open to run other applications?



Exercise #2: Making a GUI Interactive [25pts]
	In this exercise we modify the program RGBDisplayer.java, which you should download and use as a starting point. Rename this file as RGBDisplayerWithMusic.java. Each question below adds features to this program. Turn in only one version of course code, and we will grade based on what features you implemented.


Question #1 [5pts]: Adding a FileChooser
	Looking at RGB color is a bit boring, and we want our application to play music at the same time. The first step is to add a “Play Music” button, which then pops up a FileChooser component. This component is described here. If the user clicks “Cancel” in the popup, then your program does nothing. Otherwise, the program prints “Selected file: “ followed by the full path to the selected file name to System.out.


Question #2 [5pts]: Playing Music
	There are several ways to play music files in Java. we will use the javax package and focus on playing WAV files. The file WavFilePlayer.java shows an example of how to play a WAV file. Augment your program so that it plays the WAV file when the “Play Music” button is pressed.
	You will note that you cannot interact with the GUI while the music is playing. Or, in fact, you can but your interactions should take effect only after the music is over.
	You can find free WAV files all over the Web, for instance at The Sound Archive. Pick files that last a few minutes (rather than just sound bites).
	Warning: Many files will not play due to format errors (raising an exception in my sequential program). So check with the WavFilePlayer program above that you can play the file. For instance, a file that works is here, and another is there.



Question #3 [10pts]: Playing Music with a Thread
	To avoid the frozen GUI problem, when the “Play Music” button is pressed have your program start a thread that plays the WAV file. Make sure you can interact with the GUI while the music is playing.
Question #4 [5pts]: No Wild Mixes

Your implementation will make it possible to play multiple WAV files at the same time (or the same file multiple times), which can be interesting but likely undesirable. Modify your program so that only a single file can be played at a time. Rather than disabling the “Play Music” button, leave it always enabled, but if the user attempts to play a file while music is already playing, then your program should still pop up the FileChooser, but simply print “Music is already playing!” to System.out is the user actually selects a file. This way, the user can bring up the popup and look for files to play while music is playing.